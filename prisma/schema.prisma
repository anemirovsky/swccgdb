generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id             Int        @default(autoincrement()) @id
  card_id        Int?
  side           String?
  rarity         String?
  set            String?
  front_title    String?
  front_imageurl String?
  front_type     String?
  front_subtype  String?
  front_destiny  String?
  front_power    String?
  front_deploy   String?
  front_forfeit  String?
  front_gametext String?
  front_lore     String?
  counterpart    String?
  gemp_card_id   String?
  DeckCard       DeckCard[]
}

model Deck {
  id          Int          @default(autoincrement()) @id
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  title       String?
  side        String?
  description String?
  published   Boolean?     @default(false)
  authorId    Int
  User        User         @relation(fields: [authorId], references: [id])
  DeckCard    DeckCard[]
  DeckRating  DeckRating[]
}

model DeckCard {
  id               Int      @default(autoincrement()) @id
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
  cardId           Int
  deckId           Int
  is_in_side_deck  Boolean? @default(false)
  is_starting_card Boolean? @default(false)
  Card             Card     @relation(fields: [cardId], references: [id])
  Deck             Deck     @relation(fields: [deckId], references: [id])
}

model DeckRating {
  id         Int      @default(autoincrement()) @id
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  rating     Float
  authorId   Int
  deckId     Int
  User       User     @relation(fields: [authorId], references: [id])
  Deck       Deck     @relation(fields: [deckId], references: [id])
}

model User {
  id         Int          @default(autoincrement()) @id
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  first_name String?
  last_name  String?
  email      String       @unique
  username   String?
  Deck       Deck[]
  DeckRating DeckRating[]
}
