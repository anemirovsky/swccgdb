type Query {
  hello: String!
  recentDecks: [Deck]!
  cards: [Card]!
  deck(id: ID!): Deck!
}
type LoginResponse {
  jwt: String!
}
type SuccessResponse {
  success: Boolean!
}
type DeckCardIDResponse {
  newDeckCardId: ID!
}
type Mutation {
  createDeck(side: Side!): Deck!
  login(username: String!, password: String!): LoginResponse!
  addCardToDeck(deckId: ID!, cardId: ID!): DeckCardIDResponse!
  removeCardFromDeck(deckCardId: ID!): SuccessResponse!
}
enum Side {
  Dark
  Light
}
scalar Date
type Deck {
  id: ID!
  createdAt: Date!
  side: Side!
  title: String!
  description: String!
  author: User!
  averageRating: Float
  deckCards: [DeckCard]!
}
type DeckCard {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  card: Card!
  deck: Deck!
  isInSideDeck: Boolean!
}
type Card {
  id: ID!
  card_id: String!
  side: Side!
  rarity: String!
  set: String!
  title: String!
  type: String!
  imageUrl: String!
  subType: String
  destiny: String
  power: String
  deploy: String
  forfeit: String
  gametext: String
  lore: String
  gemp_card_id: String
}
type User {
  id: ID!
  username: String!
}
