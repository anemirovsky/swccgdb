type Query {
  hello: String!
  recentDecks: [Deck]!
  cards: [Card]!
}
type LoginResponse {
  jwt: String!
}
type SuccessResponse {
  success: Boolean!
}
type Mutation {
  createDeck(side: Side!): Deck!
  login(username: String!, password: String!): LoginResponse!
  addCardToDeck(deckId: ID!, cardId: ID!): SuccessResponse!
  removeCardFromDeck(deckCardId: ID!): SuccessResponse!
}
enum Side {
  Dark
  Light
}
scalar Date
type Deck {
  id: ID!
  createdAt: Date!
  side: Side!
  title: String!
  description: String!
  author: User!
  averageRating: Float
  test: String!
  cards: [Card]!
}
type Card {
  id: ID!
  type: String!
}
type User {
  id: ID!
  username: String!
}
